---
import { PrismaClient } from '@prisma/client';
import bcrypt from 'bcryptjs';
import jwt from 'jsonwebtoken';

const prisma = new PrismaClient();
const JWT_SECRET = 'passar';

// Función para manejar la creación de usuarios
const registerUser = async (formData: FormData) => {
  const username = formData.get('username') as string;
  const email = formData.get('email') as string;
  const password = formData.get('password') as string;
  const profilePictureFile = formData.get('profile_picture') as File;
  const coverPhotoFile = formData.get('cover_photo') as File;

  try {
    // Verificar si el usuario ya existe por su correo electrónico
    const existingUser = await prisma.usuario.findUnique({
      where: { email },
    });

    if (existingUser) {
      return { success: false, error: 'El usuario ya existe' };
    }

    // Encriptar la contraseña
    const hashedPassword = await bcrypt.hash(password, 10);

    // Simulación de almacenamiento de archivos
    const profilePictureUrl = `/uploads/${profilePictureFile.name}`;
    const coverPhotoUrl = `/uploads/${coverPhotoFile.name}`;

    // Crear un nuevo usuario en la base de datos
    const newUser = await prisma.usuario.create({
      data: {
        username,
        email,
        password: hashedPassword,
        profile_picture_url: profilePictureUrl,
        cover_photo_url: coverPhotoUrl,
      },
    });

    // Generar el token JWT con la información del usuario
    const token = jwt.sign(
      {
        id: newUser.id,
        username: newUser.username,
        email: newUser.email,
        profile_picture_url: newUser.profile_picture_url,
        cover_photo_url: newUser.cover_photo_url,
      },
      JWT_SECRET,
      {
        expiresIn: '1h',
      }
    );

    // Establecer el token en una cookie
    Astro.cookies.set('token', token, { httpOnly: true });

    // Redirigir a la página principal
    return { success: true };
  } catch (error) {
    console.error('Error al registrar usuario:', error);
    return { success: false, error: 'Error al registrar usuario' };
  }
};

// Si hay un método POST, intenta registrar el usuario
let registerResult;
if (Astro.request.method === 'POST') {
  const formData = await Astro.request.formData();
  registerResult = await registerUser(formData);

  if (registerResult?.success) {
    return Astro.redirect('/');
  }
}

---

<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Registro de Usuario</title>
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
</head>
<body class="bg-gray-100 flex items-center justify-center min-h-screen">
    <form method="POST" enctype="multipart/form-data" class="bg-white p-6 rounded shadow-md w-full max-w-md">
        <h2 class="text-2xl font-bold mb-5 text-center">Registro de Usuario</h2>

        <div class="mb-4">
            <label for="username" class="block text-gray-700 font-bold mb-2">Nombre de usuario:</label>
            <input type="text" id="username" name="username" class="w-full px-3 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500" required>
        </div>

        <div class="mb-4">
            <label for="email" class="block text-gray-700 font-bold mb-2">Correo electrónico:</label>
            <input type="email" id="email" name="email" class="w-full px-3 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500" required>
        </div>

        <div class="mb-4">
            <label for="password" class="block text-gray-700 font-bold mb-2">Contraseña:</label>
            <input type="password" id="password" name="password" class="w-full px-3 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500" required>
        </div>

        <div class="mb-4">
            <label for="profile_picture" class="block text-gray-700 font-bold mb-2">Foto de perfil:</label>
            <input type="file" id="profile_picture" name="profile_picture" accept="image/*" class="w-full px-3 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500">
        </div>

        <div class="mb-4">
            <label for="cover_photo" class="block text-gray-700 font-bold mb-2">Foto de portada:</label>
            <input type="file" id="cover_photo" name="cover_photo" accept="image/*" class="w-full px-3 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500">
        </div>

        <button type="submit" class="w-full bg-blue-500 text-white font-bold py-2 rounded-lg hover:bg-blue-600 transition duration-200">Registrar</button>
    </form>
</body>
</html>
