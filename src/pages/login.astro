---
import { PrismaClient } from '@prisma/client';
import bcrypt from 'bcryptjs';
import jwt from 'jsonwebtoken';
import fs from 'fs';
import path from 'path';
import RegisterForm from '../components/RegisterForm';

const prisma = new PrismaClient();
const JWT_SECRET = 'passar';

// Define el directorio de imágenes dentro de src
const IMAGE_DIRECTORY_SRC = path.join(process.cwd(), 'src', 'images');

// Verifica si la carpeta de imágenes existe en src y, si no, la crea
if (!fs.existsSync(IMAGE_DIRECTORY_SRC)) {
    fs.mkdirSync(IMAGE_DIRECTORY_SRC, { recursive: true });
}

// Define el directorio público para servir las imágenes
const IMAGE_DIRECTORY_PUBLIC = path.join(process.cwd(), 'public', 'images');

// Verifica si la carpeta pública de imágenes existe y, si no, la crea
if (!fs.existsSync(IMAGE_DIRECTORY_PUBLIC)) {
    fs.mkdirSync(IMAGE_DIRECTORY_PUBLIC, { recursive: true });
}

// Función para manejar el registro
const registerUser = async (formData: FormData) => {
    const username = formData.get('username') as string;
    const email = formData.get('email') as string;
    const password = formData.get('password') as string;

    // Validación de la contraseña
    if (password.length < 8) {
        return { success: false, error: 'La contraseña debe tener al menos 8 caracteres.' };
    }

    const hashedPassword = await bcrypt.hash(password, 10);

    // Obtiene los archivos subidos
    const profilePictureFile = formData.get('profile_picture') as File;
    const coverPhotoFile = formData.get('cover_photo') as File;

    // Variables para almacenar las rutas de las imágenes
    let profilePicturePath = '';
    let coverPhotoPath = '';

    try {
        // Guardar la imagen de perfil en src/images, si existe
        if (profilePictureFile) {
            const profilePictureFileName = `${username}_profile_${Date.now()}${path.extname(profilePictureFile.name)}`;
            profilePicturePath = path.join(IMAGE_DIRECTORY_SRC, profilePictureFileName);
            fs.writeFileSync(profilePicturePath, Buffer.from(await profilePictureFile.arrayBuffer()));

            // Mover la imagen a public/images
            const publicProfilePicturePath = path.join(IMAGE_DIRECTORY_PUBLIC, profilePictureFileName);
            fs.renameSync(profilePicturePath, publicProfilePicturePath); // Mueve el archivo
            profilePicturePath = `/images/${profilePictureFileName}`; // Ruta accesible públicamente
        }

        // Guardar la imagen de portada en src/images, si existe
        if (coverPhotoFile) {
            const coverPhotoFileName = `${username}_cover_${Date.now()}${path.extname(coverPhotoFile.name)}`;
            coverPhotoPath = path.join(IMAGE_DIRECTORY_SRC, coverPhotoFileName);
            fs.writeFileSync(coverPhotoPath, Buffer.from(await coverPhotoFile.arrayBuffer()));

            // Mover la imagen a public/images
            const publicCoverPhotoPath = path.join(IMAGE_DIRECTORY_PUBLIC, coverPhotoFileName);
            fs.renameSync(coverPhotoPath, publicCoverPhotoPath); // Mueve el archivo
            coverPhotoPath = `/images/${coverPhotoFileName}`; // Ruta accesible públicamente
        }

        const newUser = await prisma.usuario.create({
            data: {
                username,
                email,
                password: hashedPassword,
                profile_picture_url: profilePictureFile ? profilePicturePath : null,
                cover_photo_url: coverPhotoFile ? coverPhotoPath : null,
            },
        });

        const token = jwt.sign(
            { id: newUser.id, username: newUser.username, email: newUser.email },
            JWT_SECRET,
            { expiresIn: '1h' }
        );

        Astro.cookies.set('token', token, { httpOnly: true });

        return { success: true };
    } catch (error) {
        console.error('Error al crear el usuario:', error);
        return { success: false, error: 'Error al crear la cuenta' };
    }
};

// Si hay un método POST, intenta registrar al usuario
let registrationResult;
if (Astro.request.method === 'POST') {
    const formData = await Astro.request.formData();
    registrationResult = await registerUser(formData);

    if (registrationResult?.success) {
        return new Response(JSON.stringify({ success: true }), {
            status: 200,
            headers: { 'Content-Type': 'application/json' },
        });
    }
}

---

<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Registro</title>
    <style>

        .zoom {
            transition: transform 0.5s ease;
        }
        .zoom:hover {
            transform: scale(0.5);
        }
    </style>
</head>
<body>
    <div class="min-h-screen bg-gray-100 text-gray-900 flex justify-center">
        <div class="max-w-screen-xl m-0 sm:m-10 bg-white shadow sm:rounded-lg flex justify-center flex-1">
            
            <div class="lg:w-1/2 xl:w-5/12 p-6 sm:p-12 mt-6">
                <h1 class="mt-4 text-2xl xl:text-3xl font-extrabold">Crear Cuenta</h1>
                <div class="mt-12">
                    <form method="POST" enctype="multipart/form-data" class="space-y-4">
                        <RegisterForm client:load />
                    </form>
                </div>
            </div>
            <div class="flex-1 bg-[#404040] text-center hidden lg:flex">
                <div class="my-4 mx-auto w-full">
                    <img src="logo.jpeg" alt="Logo" class="w-3/4 lg:w-full h-[700px] object-cover mx-auto zoom">
                </div>
            </div>
        </div>
    </div>
</body>
</html>